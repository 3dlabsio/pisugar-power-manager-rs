name: Master

on:
  push:
    branches: [ master ]

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fix cargo config
        run: sed -e "s/.*replace-with.*//g" -i .cargo/config

      # Nodejs npm cache
      - name: Nodejs npm cache
        uses: actions/cache@v1
        env:
          cache-name: cache-node-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      # Nodejs modules cache
      - name: Nodejs modules cache
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      # Nodejs
      - name: Setup Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      # Nodejs dependencies
      - run: npm install
        working-directory: electron
      # Nodejs build web
      - run: npm run build:web
        working-directory: electron

      # Rust cache
      #    - name: Rust cargo cache
      #      uses: actions/cache@v1
      #      env:
      #        cache-name: cache-rust-cargo
      #      with:
      #        path: ~/.cargo
      #        key: ${{ runner.os }}-build-${{ env.cache-name }}
      # Rust target cache
      - name: Rust target cache
        uses: actions/cache@v1
        env:
          cache-name: cache-rust-target
        with:
          path: target
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      # Rust musl cross cache arm
      - name: Rust musl cache
        uses: actions/cache@v1
        env:
          cache-name: cache-rust-musl
        with:
          path: /opt
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      # Rust musl cross toolchain
      - name: Rust musl cross toolchain
        run: |
          if ! test -d /opt/arm-linux-musleabihf-cross/bin; then
            wget https://more.musl.cc/$(uname -m)-linux-musl/arm-linux-musleabihf-cross.tgz
            tar -xvf arm-linux-musleabihf-cross.tgz
            mv arm-linux-musleabihf-cross /opt/
          fi
          echo ::set-env name=PATH::/opt/arm-linux-musleabihf-cross/bin:$PATH
      # Rust target arm-unknown-linux-musleabihf
      - name: Rust add arm-unknown-linux-musleabihf target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: arm-unknown-linux-musleabihf
          override: true

      # Rust musl cross toolchain aarch64
      - name: Rust musl cross toolchain
        run: |
          if ! test -d /opt/aarch64-linux-musl-cross/bin; then
            wget https://more.musl.cc/$(uname -m)-linux-musl/aarch64-linux-musl-cross.tgz
            tar -xvf aarch64-linux-musl-cross.tgz
            mv aarch64-linux-musl-cross /opt/
          fi
          echo ::set-env name=PATH::/opt/aarch64-linux-musl-cross/bin:$PATH
      # Rust target aarch64-unknown-linux-musl
      - name: Rust add aarch64-unknown-linux-musl target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-musl
          override: true
      # Fix libgcc.a for aarch64
      - run: |
          LIBGCC=$(find /opt/aarch64-linux-musl-cross -name libgcc.a)
          echo $LIBGCC
          sed -e "s|\"/opt/aarch64-linux-musl-cross/lib/gcc/aarch64-linux-musl/9.2.1"|\"${LIBGCC%/*}\"|" -i .cargo/config
          cat .cargo/config

      # Rust install cargo-deb
      - name: Rust install cargo-deb
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deb
          version: latest
          use-tool-cache: true
      # Rust cargo deb - pisugar-server
      - uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --target arm-unknown-linux-musleabihf --manifest-path=pisugar-server/Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --target aarch64-unknown-linux-musl --manifest-path=pisugar-server/Cargo.toml
      # Rust cargo deb - pisugar-poweroff
      - uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --target arm-unknown-linux-musleabihf --manifest-path=pisugar-poweroff/Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --target aarch64-unknown-linux-musl --manifest-path=pisugar-poweroff/Cargo.toml

      # Rust install cargo-rpm
      - name: Rust install cargo-rpm
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-rpm
          version: latest
          use-tool-cache: true
      - run: (cd pisugar-server && cargo rpm build --target arm-unknown-linux-musleabihf)
      - run: (cd pisugar-server && cargo rpm build --target aarch64-unknown-linux-musl)
      - run: (cd pisugar-poweroff && cargo rpm build --target arm-unknown-linux-musleabihf)
      - run: (cd pisugar-poweroff && cargo rpm build --target aarch64-unknown-linux-musl)

      # Upload artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: pisugar-debs
          path: |
            target/**/*.deb
            target/**/rpmbuild/RPMS/**/*.rpm
            scripts/*

      # Development Release
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Development Build"
          prerelease: true
          draft: false
          files: |
            target/**/*.deb
            target/**/rpmbuild/RPMS/**/*.rpm
            scripts/*

      # Upload QiNiu nightly
      - name: "Upload to QiNiu"
        env:
          QINIU_BUCKET: ${{ secrets.QINIU_BUCKET }}
          QINIU_AK: ${{ secrets.QINIU_AK }}
          QINIU_SK: ${{ secrets.QINIU_SK }}
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

          if [ $(uname -m) == 'x86_64' ]; then
            wget http://devtools.qiniu.com/qshell-linux-x64-v2.4.1.zip
            unzip qshell-linux-x64-v2.4.1.zip
            mv qshell-linux-x64-v2.4.1 qshell
          else
            wget http://devtools.qiniu.com/qshell-linux-x86-v2.4.1.zip
            unzip qshell-linux-x86-v2.4.1.zip
            mv qshell-linux-x86-v2.4.1 qshell
          fi
          chmod +x qshell
          ./qshell account -w ${QINIU_AK} ${QINIU_SK} deploy-account

          for f in $(find target/arm-unknown-linux-musleabihf -name '*.deb' ) \
            $(find target -name '*.rpm' | grep 'rpmbuild/RPMS'); do
            filename=${f##*/}
            key=nightly/${filename}
            ./qshell rput --overwrite ${QINIU_BUCKET} ${key} ${f}
          done
          for f in $(find scripts -name '*.sh' ); do
            filename=${f##*/}
            key=nightly/${filename}
            ./qshell rput --overwrite --mimetype text/plain ${QINIU_BUCKET} ${key} ${f}
          done