# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.

    # Nodejs
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    # Nodejs cache
    - name: Nodejs cache
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Nodejs dependencies
    - run: npm install
      working-directory: electron

    # Nodejs build web
    - run: npm run build:web
      working-directory: electron

    # Rust cache
    - name: Rust cargo cache
      uses: actions/cache@v1
      env:
        cache-name: cache-rust-cargo
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Rust target cache
    - name: Rust target cache
      uses: actions/cache@v1
      env:
        cache-name: cache-rust-target
      with:
        path: target
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Rust target arm-unknown-linux-gnueabihf
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: arm-unknown-linux-gnueabihf
        override: true

    # Rust cross build
    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --target arm-unknown-linux-gnueabihf --release
    - run: |
        mkdir -p target/arm-unknown-linux-gnueabihf/release
        cp -rf target/release/* target/arm-unknown-linux-gnueabihf/release/

    # Rust cargo-deb
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-deb
        version: latest

    # Rust cargo deb
    - uses: actions-rs/cargo@v1
      with:
        command: deb
        args: --target arm-unknown-linux-gnueabihf --manifest-path=pisugar-server/Cargo.toml --no-build --no-strip

    # Upload artifact
    - uses: actions/upload-artifact@v1
      with:
        name: pisugar-server-deb
        path: target/arm-unknown-linux-gnueabihf/deb